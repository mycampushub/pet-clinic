// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Multi-tenant architecture
model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  settings    Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  clinics     Clinic[]
  users       User[]
  owners      Owner[]
  pets        Pet[]
  visits      Visit[]
  medications Medication[]
  prescriptions Prescription[]
  inventory   InventoryItem[]
  invoices    Invoice[]
  labOrders   LabOrder[]
  reminders   Reminder[]
  auditLogs   AuditLog[]

  @@map("tenants")
}

// Multi-location support
model Clinic {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  country     String   @default("US")
  phone       String
  email       String?
  website     String?
  timezone    String   @default("UTC")
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users       User[]
  visits      Visit[]
  inventory   InventoryItem[]
  invoices    Invoice[]
  auditLogs   AuditLog[]

  @@map("clinics")
  @@index([tenantId])
}

// User model with role-based access control
model User {
  id            String   @id @default(cuid())
  tenantId      String
  clinicId      String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole @default(STAFF)
  permissions   Json?
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clinic        Clinic?  @relation(fields: [clinicId], references: [id])
  visits       Visit[]
  prescriptions Prescription[]
  auditLogs    AuditLog[]

  @@map("users")
  @@index([tenantId])
  @@index([clinicId])
  @@index([email])
}

// Pet owners
model Owner {
  id          String   @id @default(cuid())
  tenantId    String
  firstName   String
  lastName    String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String   @default("US")
  emergencyContact Json?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pets        Pet[]
  invoices    Invoice[]

  @@map("owners")
  @@index([tenantId])
}

// Patient (Pet) records
model Pet {
  id              String   @id @default(cuid())
  tenantId        String
  ownerId         String
  name            String
  species         String
  breed           String?
  gender          PetGender
  isNeutered      Boolean  @default(false)
  dateOfBirth     DateTime?
  microchipId     String?
  color           String?
  weight          Float?
  allergies       Json?
  chronicConditions Json?
  notes           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner           Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  visits          Visit[]
  prescriptions   Prescription[]
  labOrders       LabOrder[]
  reminders       Reminder[]

  @@map("pets")
  @@index([tenantId])
  @@index([ownerId])
  @@index([microchipId])
}

// Visit/Appointment records
model Visit {
  id              String   @id @default(cuid())
  tenantId        String
  clinicId        String
  petId           String
  userId          String?  // Veterinarian/Provider
  visitType       VisitType
  status          VisitStatus @default(SCHEDULED)
  scheduledAt     DateTime
  checkedInAt     DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  reason          String?
  symptoms        String?
  diagnosis       String?
  treatment       String?
  notes           String?
  followUpRequired Boolean  @default(false)
  followUpDate    DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clinic          Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet             Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [userId], references: [id])
  soapNotes       SOAPNote[]
  procedures      Procedure[]
  prescriptions   Prescription[]
  labOrders       LabOrder[]
  invoices        Invoice[]

  @@map("visits")
  @@index([tenantId])
  @@index([clinicId])
  @@index([petId])
  @@index([userId])
  @@index([scheduledAt])
}

// SOAP Notes for clinical documentation
model SOAPNote {
  id          String   @id @default(cuid())
  visitId     String
  subjective  String?
  objective   String?
  assessment String?
  plan        String?
  weight      Float?
  temperature Float?
  heartRate   Int?
  respiratoryRate Int?
  notes       String?
  attachments Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  visit       Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@map("soap_notes")
  @@index([visitId])
}

// Medical procedures
model Procedure {
  id              String   @id @default(cuid())
  visitId         String
  code            String?
  description     String
  procedureType   String
  anesthesiaUsed  Boolean  @default(false)
  anesthesiaNotes String?
  notes           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  visit           Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@map("procedures")
  @@index([visitId])
}

// Medication catalog
model Medication {
  id              String   @id @default(cuid())
  tenantId        String
  name            String
  description     String?
  category        String?
  genericName     String?
  brandName       String?
  strength        String?
  dosageForm      String?
  ndcCode         String?
  schedule        String?  // Controlled substance schedule
  requiresPrescription Boolean @default(true)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  prescriptions   Prescription[]
  inventory       InventoryItem[]

  @@map("medications")
  @@index([tenantId])
  @@index([name])
}

// Prescriptions
model Prescription {
  id            String   @id @default(cuid())
  tenantId      String
  visitId       String
  medicationId String
  userId        String   // Prescribing provider
  petId         String   // Add this field
  dosage        String
  frequency     String
  duration      String
  quantity      Int
  refills       Int      @default(0)
  instructions  String?
  notes         String?
  status        PrescriptionStatus @default(ACTIVE)
  dispensedAt   DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  tenant        Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visit         Visit      @relation(fields: [visitId], references: [id], onDelete: Cascade)
  medication    Medication @relation(fields: [medicationId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  pet           Pet        @relation(fields: [petId], references: [id])

  @@map("prescriptions")
  @@index([tenantId])
  @@index([visitId])
  @@index([medicationId])
  @@index([userId])
  @@index([petId])
}

// Inventory management
model InventoryItem {
  id              String   @id @default(cuid())
  tenantId        String
  clinicId        String
  medicationId    String?
  sku             String?
  name            String
  description     String?
  category        String?
  quantity        Int      @default(0)
  reorderPoint    Int      @default(0)
  unit            String   @default("each")
  cost            Float?
  price           Float?
  lotNumber       String?
  expiryDate      DateTime?
  isControlled    Boolean  @default(false)
  schedule        String?
  location        String?
  notes           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clinic          Clinic     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  medication      Medication? @relation(fields: [medicationId], references: [id])

  @@map("inventory_items")
  @@index([tenantId])
  @@index([clinicId])
  @@index([medicationId])
  @@index([expiryDate])
}

// Billing and invoicing
model Invoice {
  id              String   @id @default(cuid())
  tenantId        String
  clinicId        String
  visitId         String?
  ownerId         String?
  invoiceNumber   String   @unique
  invoiceDate     DateTime @default(now())
  dueDate         DateTime?
  subtotal        Float
  tax             Float    @default(0)
  discount        Float    @default(0)
  total           Float
  status          InvoiceStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(UNPAID)
  notes           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clinic          Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  visit           Visit?   @relation(fields: [visitId], references: [id])
  owner           Owner?   @relation(fields: [ownerId], references: [id])
  items           InvoiceItem[]
  payments        Payment[]

  @@map("invoices")
  @@index([tenantId])
  @@index([clinicId])
  @@index([visitId])
  @@index([ownerId])
  @@index([invoiceNumber])
}

// Invoice line items
model InvoiceItem {
  id            String   @id @default(cuid())
  invoiceId     String
  description   String
  quantity      Int
  unitPrice     Float
  total         Float
  itemType      String   // SERVICE, MEDICATION, PRODUCT, PROCEDURE
  referenceId   String?  // ID of referenced item (medication, procedure, etc.)
  notes         String?
  createdAt     DateTime @default(now())

  // Relationships
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
  @@index([invoiceId])
}

// Payments
model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  amount        Float
  paymentMethod String   // CASH, CARD, CHECK, ONLINE, INSURANCE
  transactionId String?
  reference     String?
  status        String   @default("COMPLETED")
  notes         String?
  processedAt   DateTime @default(now())
  createdAt     DateTime @default(now())

  // Relationships
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
  @@index([invoiceId])
}

// Lab orders and results
model LabOrder {
  id            String   @id @default(cuid())
  tenantId      String
  visitId       String
  petId         String
  labProvider   String?
  testType      String
  tests         Json
  status        LabStatus @default(REQUESTED)
  requestedAt   DateTime @default(now())
  completedAt   DateTime?
  results       Json?
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visit         Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)
  pet           Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("lab_orders")
  @@index([tenantId])
  @@index([visitId])
  @@index([petId])
}

// Reminders
model Reminder {
  id            String   @id @default(cuid())
  tenantId      String
  petId         String
  type          ReminderType
  title         String
  message       String?
  triggerDate   DateTime
  sentAt        DateTime?
  status        ReminderStatus @default(PENDING)
  method        String   // SMS, EMAIL, PUSH
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pet           Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("reminders")
  @@index([tenantId])
  @@index([petId])
  @@index([triggerDate])
}

// Audit trail for compliance
model AuditLog {
  id            String   @id @default(cuid())
  tenantId      String
  clinicId      String?
  userId        String?
  action        String
  targetType    String
  targetId      String
  oldValues     Json?
  newValues     Json?
  metadata      Json?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())

  // Relationships
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clinic        Clinic?  @relation(fields: [clinicId], references: [id])
  user          User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
  @@index([tenantId])
  @@index([clinicId])
  @@index([userId])
  @@index([action])
  @@index([targetType])
  @@index([createdAt])
}

// Enums
enum UserRole {
  ADMIN
  VETERINARIAN
  VET_TECH
  RECEPTIONIST
  CLINIC_ADMIN
  PHARMACIST
  OWNER
  STAFF
}

enum PetGender {
  MALE
  FEMALE
  UNKNOWN
}

enum VisitType {
  CONSULTATION
  VACCINATION
  SURGERY
  DENTAL
  GROOMING
  EMERGENCY
  FOLLOW_UP
  TELEMEDICINE
  CHECKUP
}

enum VisitStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  SENT
  OVERDUE
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERPAID
  REFUNDED
}

enum LabStatus {
  REQUESTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReminderType {
  VACCINATION
  MEDICATION
  APPOINTMENT
  FOLLOW_UP
  CHECKUP
}

enum ReminderStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}